<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

    <bean id="user" class="com.masongshan.springdemo.entity.User"/>

    <!--    <bean id="exceptionHandler" class="net.crm.base.exception.MyExceptionHandler"/>

       <mvc:annotation-driven />
       <aop:aspectj-autoproxy />
       <context:component-scan base-package="net.crm.*" ></context:component-scan>-->


    <!--<bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>-->

    <!--<bean id="dataSources" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        &lt;!&ndash; 基本属性 url、user、password &ndash;&gt;
        <property name="url" value="${jdbcUrl}" />
        <property name="username" value="${user}" />
        <property name="password" value="${password}" />

        &lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="100" />

        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
        <property name="maxWait" value="60000" />

        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        &lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        &lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;
        <property name="filters" value="stat" />
    </bean>-->


    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="user" value="${jdbc.user}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClass" value="${jdbc.driverClass}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="initialPoolSize" value="10" />
        <property name="maxIdleTime" value="100" />
        <property name="maxPoolSize" value="200" />
        <property name="minPoolSize" value="10" />
    </bean>

    &lt;!&ndash; 配置Jdbc模板 &ndash;&gt;
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
-->


    <!--
      <aop:config>
          <aop:pointcut id="servicePointcut"   expression="execution(* *..service..*.*(..))"/>
          <aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointcut"/>
      </aop:config>


      <bean id="userAdvice" class="com.niuren.advice.UserAdvice"></bean>
      <aop:config>
          <aop:aspect id="userAop" ref="userAdvice">
              <aop:pointcut id="target" expression="execution(* com.niuren.service.*.*(..))"/>
              <aop:before method="doBefore" pointcut-ref="target"/>
          </aop:aspect>
      </aop:config>
    -->

    <!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
         <property name="configLocation" value="classpath:mybatis-config.xml"></property>
         <property name="dataSource" ref="dataSource" />
         <property name="mapperLocations" value="classpath*:net/crm/**/mapper/*.xml" />
     </bean>


     <bean id="messageSource"
           class="org.springframework.context.support.ResourceBundleMessageSource">
         <property name="basenames">
             <list>
                 <value>ApplicationResources</value>
             </list>
         </property>
         <property name="useCodeAsDefaultMessage" value="true" />
     </bean>


     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
         <property name="annotationClass" value="org.springframework.stereotype.Repository" />
         <property name="basePackage" value="net.crm" />
     </bean>



     <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
         <constructor-arg index="0" ref="sqlSessionFactory" />
     </bean>

     &lt;!&ndash; 事务管理 &ndash;&gt;
     <bean id="transactionManager"
           class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
         <property name="dataSource" ref="dataSource" />
     </bean>
 -->

    <!-- 配置那些类的方法进行事务管理 -->
    <!--<aop:config>
        <aop:pointcut id="executeService" expression="execution(* net.crm.*.service..*(..))"/>
        <aop:advisor pointcut-ref="executeService" advice-ref="txAdvice"/>
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="load*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="read*" read-only="true"/>
            <tx:method name="sync*"/>
            <tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>-->


    <!-- 事务注解支持
    <tx:annotation-driven transaction-manager="transactionManager" /> -->
    <!-- 扫描注解文件 -->
    <!--<mvc:annotation-driven />
    <context:component-scan base-package="net.crm.*" />
    <aop:aspectj-autoproxy />-->


</beans>
